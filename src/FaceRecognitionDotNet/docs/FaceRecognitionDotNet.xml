<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FaceRecognitionDotNet</name>
    </assembly>
    <members>
        <member name="T:FaceRecognitionDotNet.DisposableObject">
            <summary>
            Represents a class which has managed or unmanaged resources.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <returns>true if this instance has been disposed; otherwise, false.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.ThrowIfDisposed">
            <summary>
            If this object is disposed, then <see cref="T:System.ObjectDisposedException"/> is thrown.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.DisposeManaged">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:FaceRecognitionDotNet.DisposableObject"/>.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:FaceRecognitionDotNet.DisposableObject"/>.
            </summary>
            <param name="disposing">Indicate value whether <see cref="M:System.IDisposable.Dispose"/> method was called.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.FaceEncoding">
            <summary>
            Represents a feature data of face. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceEncoding.Size">
            <summary>
            Gets the size of feature data.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceEncoding.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceEncoding.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.FacePart">
            <summary>
            Specifies the part of face.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.Chin">
            <summary>
            Specifies the chin.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.LeftEyebrow">
            <summary>
            Specifies the left eyebrow.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.RightEyebrow">
            <summary>
            Specifies the right eyebrow.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.NoseBridge">
            <summary>
            Specifies the nose bridge.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.NoseTip">
            <summary>
            Specifies the nose tip.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.LeftEye">
            <summary>
            Specifies the left eye.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.RightEye">
            <summary>
            Specifies the right eye.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.TopLip">
            <summary>
            Specifies the top lip.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.BottomLip">
            <summary>
            Specifies the bottom lip.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.Nose">
            <summary>
            Specifies the nose.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.FaceRecognition">
            <summary>
            Provides the method to find and recognize face methods. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.FaceRecognition"/> class with the directory path that stores model files.
            </summary>
            <param name="directory">The directory path that stores model files.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory path is not found.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.InternalEncoding">
            <summary>
            Gets or sets the character encoding to convert System.String to byte[] for internal library.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.BatchFaceLocations(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Image},System.Int32,System.Int32)">
            <summary>
            Returns an enumerable collection of array of bounding boxes of human faces in a image using the cnn face detector.
            </summary>
            <param name="images">An enumerable collection of images.</param>
            <param name="numberOfTimesToUpsample">The number of image looking for faces. Higher numbers find smaller faces.</param>
            <param name="batchSize">The number of images to include in each GPU processing batch.</param>
            <returns>An enumerable collection of array of found face locations.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="images"/> is null.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.CompareFace(FaceRecognitionDotNet.FaceEncoding,FaceRecognitionDotNet.FaceEncoding,System.Double)">
            <summary>
            Compare a known face encoding against a candidate encoding to see if they match.
            </summary>
            <param name="knownFaceEncoding">A known face encodings.</param>
            <param name="faceEncodingToCheck">A single face encoding to compare against a known face encoding.</param>
            <param name="tolerance">The distance between faces to consider it a match. Lower is more strict. The default value is 0.6.</param>
            <returns>A True/False value indicating which known a face encoding matches the face encoding to check.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="knownFaceEncoding"/> or <paramref name="faceEncodingToCheck"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="knownFaceEncoding"/> or <paramref name="faceEncodingToCheck"/>.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.CompareFaces(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FaceEncoding},FaceRecognitionDotNet.FaceEncoding,System.Double)">
            <summary>
            Compare an enumerable collection of face encodings against a candidate encoding to see if they match.
            </summary>
            <param name="knownFaceEncodings">An enumerable collection of known face encodings.</param>
            <param name="faceEncodingToCheck">A single face encoding to compare against the enumerable collection.</param>
            <param name="tolerance">The distance between faces to consider it a match. Lower is more strict. The default value is 0.6.</param>
            <returns>An enumerable collection of True/False values indicating which known face encodings match the face encoding to check.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="knownFaceEncodings"/> or <paramref name="faceEncodingToCheck"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceEncodingToCheck"/> is disposed. Or <paramref name="knownFaceEncodings"/> contains disposed object.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.Create(System.String)">
            <summary>
            Create a new instance of the <see cref="T:FaceRecognitionDotNet.FaceRecognition"/> class.
            </summary>
            <param name="directory">The directory path that stores model files.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory path is not found.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceDistance(FaceRecognitionDotNet.FaceEncoding,FaceRecognitionDotNet.FaceEncoding)">
            <summary>
            Compare a face encoding to a known face encoding and get a euclidean distance for comparison face.
            </summary>
            <param name="faceEncoding">The face encoding to compare.</param>
            <param name="faceToCompare">The face encoding to compare against.</param>
            <returns>The euclidean distance for comparison face. If 0, faces are completely equal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceEncoding"/> or <paramref name="faceToCompare"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceEncoding"/> or <paramref name="faceToCompare"/> is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceDistances(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FaceEncoding},FaceRecognitionDotNet.FaceEncoding)">
            <summary>
            Compare an enumerable collection of face encoding to a known face encoding and get an enumerable collection of euclidean distance for comparison face.
            </summary>
            <param name="faceEncodings">The enumerable collection of face encoding to compare.</param>
            <param name="faceToCompare">The face encoding to compare against.</param>
            <returns>The enumerable collection of euclidean distance for comparison face. If 0, faces are completely equal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceEncodings"/> or <paramref name="faceToCompare"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceToCompare"/> is disposed. Or <paramref name="faceEncodings"/> contains disposed object.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceEncodings(FaceRecognitionDotNet.Image,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Location},System.Int32)">
            <summary>
            Returns an enumerable collection of face feature data corresponds to all faces in specified image.
            </summary>
            <param name="image">The image contains faces. The image can contain multiple faces.</param>
            <param name="knownFaceLocation">The enumerable collection of location rectangle for faces. If specified null, method will find face locations.</param>
            <param name="numJitters">The number of times to re-sample the face when calculating encoding.</param>
            <returns>An enumerable collection of face feature data corresponds to all faces in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceLandmark(FaceRecognitionDotNet.Image,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Location},FaceRecognitionDotNet.PredictorModel)">
            <summary>
            Returns an enumerable collection of dictionary of face parts locations (eyes, nose, etc) for each face in the image.
            </summary>
            <param name="faceImage">The image contains faces. The image can contain multiple faces.</param>
            <param name="faceLocations">The enumerable collection of location rectangle for faces. If specified null, method will find face locations.</param>
            <param name="model">The model of face detector.</param>
            <returns>An enumerable collection of dictionary of face parts locations (eyes, nose, etc).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceImage"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceImage"/> or this object is disposed.</exception>
            <exception cref="T:System.NotSupportedException">helen-dataset.dat does not exist.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceLocations(FaceRecognitionDotNet.Image,System.Int32,FaceRecognitionDotNet.Model)">
            <summary>
            Returns an enumerable collection of face location correspond to all faces in specified image.
            </summary>
            <param name="image">The image contains faces. The image can contain multiple faces.</param>
            <param name="numberOfTimesToUpsample">The number of times to up-sample the image when finding faces.</param>
            <param name="model">The model of face detector to detect in image.</param>
            <returns>An enumerable collection of face location correspond to all faces in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadFaceEncoding(System.Double[])">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.FaceEncoding"/> from the <see cref="T:System.Double"/> array.
            </summary>
            <param name="encoding">The <see cref="T:System.Double"/> array contains face encoding data.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.FaceEncoding"/> this method creates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="encoding"/> must be 128.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadImage(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.Image"/> from the <see cref="T:System.Byte"/> array.
            </summary>
            <param name="array">The <see cref="T:System.Byte"/> array contains image data.</param>
            <param name="row">The number of rows in a image data.</param>
            <param name="column">The number of columns in a image data.</param>
            <param name="elementSize">The image element size in bytes.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.Image"/> this method creates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="elementSize"/> must be 3 or 1.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadImageFile(System.String,FaceRecognitionDotNet.Mode)">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.Image"/> from the specified path.
            </summary>
            <param name="file">A string that contains the path of the file from which to create the <see cref="T:FaceRecognitionDotNet.Image"/>.</param>
            <param name="mode">A image color mode.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.Image"/> this method creates.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The specified path does not exist.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Image">
            <summary>
            Represents a image data. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Image.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Image.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Image.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Location">
            <summary>
            Describes the left, top, right and bottom location of a face. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Location"/> structure with the specified left, top, right and bottom.
            </summary>
            <param name="left">The x-axis value of the left side of the rectangle of face.</param>
            <param name="top">The y-axis value of the top of the rectangle of face.</param>
            <param name="right">The x-axis value of the right side of the rectangle of face.</param>
            <param name="bottom">The y-axis value of the bottom of the rectangle of face.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Bottom">
            <summary>
            Gets the y-axis value of the bottom of the rectangle of face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle of face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle of face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Top">
            <summary>
            Gets the y-axis value of the top of the rectangle of face.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.Equals(FaceRecognitionDotNet.Location)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Location"/> class for equality.
            </summary>
            <param name="other">The face location to compare to this instance.</param>
            <returns><code>true</code> if both <see cref="T:FaceRecognitionDotNet.Location"/> class contain the same <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> values; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:FaceRecognitionDotNet.Location"/> and whether it contains the same face location as this <see cref="T:FaceRecognitionDotNet.Location"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:FaceRecognitionDotNet.Location"/> and contains the same <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> values as this <see cref="T:FaceRecognitionDotNet.Location"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FaceRecognitionDotNet.Location"/>.
            </summary>
            <returns>The hash code for this <see cref="T:FaceRecognitionDotNet.Location"/> class.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.op_Equality(FaceRecognitionDotNet.Location,FaceRecognitionDotNet.Location)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Location"/> class for equality.
            </summary>
            <param name="location1">The first <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <param name="location2">The second <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <returns><code>true</code> if both the <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> face location of <paramref name="location1"/> and <paramref name="location2"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.op_Inequality(FaceRecognitionDotNet.Location,FaceRecognitionDotNet.Location)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Location"/> class for inequality.
            </summary>
            <param name="location1">The first <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <param name="location2">The second <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <returns><code>true</code> if <paramref name="location1"/> and <paramref name="location2"/> have different <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> or <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> coordinates; <code>false</code> if <paramref name="location1"/> and <paramref name="location2"/> have the same <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> face location.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Mode">
            <summary>
            Specifies the image mode.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Mode.Rgb">
            <summary>
            Specifies that the rgb (8-bit Red, Green and Blue, 3 channels) image mode.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Mode.Greyscale">
            <summary>
            Specifies that the greyscale image mode.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Model">
            <summary>
            Specifies the model of face detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Model.Hog">
            <summary>
            Specifies that the model is HOG (Histograms of Oriented Gradients) based face detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Model.Cnn">
            <summary>
            Specifies that the model is CNN (Convolutional Neural Network) based face detector.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Point"/> structure with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.Point.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Point.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.Equals(FaceRecognitionDotNet.Point)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Point"/> structures for equality.
            </summary>
            <param name="other">The point to compare to this instance.</param>
            <returns><code>true</code> if both <see cref="T:FaceRecognitionDotNet.Point"/> structures contain the same <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> values; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:FaceRecognitionDotNet.Point"/> and whether it contains the same coordinates as this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:FaceRecognitionDotNet.Point"/> and contains the same <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> values as this <see cref="T:FaceRecognitionDotNet.Point"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
            <returns>The hash code for this <see cref="T:FaceRecognitionDotNet.Point"/> structure.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.op_Equality(FaceRecognitionDotNet.Point,FaceRecognitionDotNet.Point)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Point"/> structures for equality.
            </summary>
            <param name="point1">The first <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <param name="point2">The second <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <returns><code>true</code> if both the <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> coordinates of <paramref name="point1"/> and <paramref name="point2"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.op_Inequality(FaceRecognitionDotNet.Point,FaceRecognitionDotNet.Point)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Point"/> structures for inequality.
            </summary>
            <param name="point1">The first <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <param name="point2">The second <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <returns><code>true</code> if <paramref name="point1"/> and <paramref name="point2"/> have different <see cref="P:FaceRecognitionDotNet.Point.X"/> or <see cref="P:FaceRecognitionDotNet.Point.Y"/> coordinates; <code>false</code> if <paramref name="point1"/> and <paramref name="point2"/> have the same <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> coordinates.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.PredictorModel">
            <summary>
            Specifies the dimension of vector which be returned from detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.PredictorModel.Large">
            <summary>
            Specifies that the large scale detector. The detector returns 68 points for represent face. 
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.PredictorModel.Small">
            <summary>
            Specifies that the small scale detector. The detector returns 5 points for represent face. 
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.PredictorModel.Helen">
            <summary>
            Specifies that the detector of helen dataset. The detector returns 194 points for represent face. 
            </summary>
        </member>
    </members>
</doc>
